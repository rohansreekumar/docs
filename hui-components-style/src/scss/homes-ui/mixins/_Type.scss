// Type
//
// Type Styles
//
// Styleguide 5.

// Color Text
//
// Text colors
//
// .blueT - Blue Text
// .greenT - Green Text
// .redT - Red Text
// .orangeT - orange Text
// .greyT - Grey Text
// .blackT - Black Text
// .whiteT - White Text
//
// Markup:
// <div class={$modifiers}>Text Color example: {$modifiers}</div>
//
// Styleguide 5.0.4

// @huidocs mixin
// @name ellipsis
//
// @description
// Truncate a line and add an ellipsis
//
// @param {boolean=true} $extend  Extends the default styles instead of inserting the mixin output. Set to false if you are customizing the component.
//
// ```scss
// @include ellipsis;
// ```
//
// @markup
// <div class="ellipsisT" style="width:200px;">Lorem ipsum Nulla pariatur esse ad sint minim eu incididunt veniam voluptate quis ad Ut culpa culpa Ut anim magna deserunt.</div>
//
// @styleguide 5.0.5.1

@mixin ellipsis($extend: true) {
    @if $extend {
        @extend %ellipsis;
    } @else {
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
}

//
// Content Headings
//
// Headings that establish hierarchy of main page content.
//
// Markup:
// <h1>Heading 1<small>Sub text</small></h1>
// <h2 class="bar">Heading 2 with bar</h2>
// <h2>Heading 2 without bar (less common)</h2>
// <h3>Heading 3 </h3>
// <h4>Heading 4 </h4>
//
// Styleguide 5.1

//
// Content Headings (mixin)
//
// Mixins for creating content headings component.
//
// ## Defaults
//
// ```scss
// $font-size-h1: $font-size-2xlarge !default;
// $font-size-h2: $font-size-medium !default;
// $font-size-h2-bar: $font-size-2xlarge !default;
// $font-size-h3: $font-size-medium !default;
//
// ```
//
// ## Params
//
// > * `$extend` - true {boolean} Extends the default styles instead of inserting the mixin output. Set to false if you are customizing the component.
//
// ```scss
// @include h1;
// ```
//
// Styleguide 5.1.1

$font-size-h1: $font-size-gigantor !default;
$font-size-h2: $font-size-2xlarge !default;
$font-size-h2-bar: $font-size-2xlarge !default;
$font-size-h3: $font-size-large !default;

$subheader-font-color: $body-color;
$subheader-font-weight: 400;

@mixin heading($extend: true) {
    @if $extend {
        @extend %heading;
    } @else {
        display: block;
        color: $blue;
        @include font-weight(700);

        //* http://www.usabilitypost.com/2012/11/05/stop-fixing-font-smoothing/ */
        @include experimental(font-smoothing, antialiased);
    }
}

@mixin h1($extend: true) {
    @if $extend {
        @extend %h1;
    } @else {
        @include heading;
        @include font-weight(400);
        @include adjust-font-size-to($font-size-h1, $from-size: $font-size-normal);
        margin: rhythm(.75, $font-size-h1) 0;

        & > small {
            font-size: $font-size-small;
            color: $darkGrey;
            padding-left: .5em;
            &:before {
                content: '- ';
            }
        }
    }
}

@mixin h2($extend: true) {
    @if $extend {
        @extend %h2;
    } @else {
        @include heading;
        @include font-weight(400);
        @include adjust-font-size-to($to-size: $font-size-h2, $from-size: $font-size-normal);
        margin: rhythm(.75, $font-size-h2) 0;
        color: $blue;
        &.bar {
            @include h2-bar;
        }
    }
}

@mixin h2-bar($extend: true) {
    @if $extend {
        @extend %h2-bar;
    } @else {
        // @include font-weight(400);
        // @include adjust-font-size-to($to-size:$font-size-h2-bar, $from-size:$font-size-normal);
        @include trailing-border($width: 1px, $lines: .5, $font-size: $font-size-h2-bar);
        border-color: $border-color;
        padding: {
            left: $grid-space;
            right: $grid-space;
        }
        margin: {
            top: 0;
            bottom: rhythm(1, $font-size-h2-bar);
            left: -1 * $grid-space;
            right: -1 * $grid-space;
        }
    }
}

@mixin h3($extend: true) {
    @if $extend {
        @extend %h3;
    } @else {
        @include heading;
        @include adjust-font-size-to($to-size: $font-size-h3, $from-size: $font-size-normal);
        // @include font-weight(700);
        @include margin-leader($lines: .75, $font-size: $font-size-h3);
        @include margin-trailer($lines: .25, $font-size: $font-size-h3);
    }
}

@mixin h4($extend: true) {
    @if $extend {
        @extend %h4;
    } @else {
        @include heading;
        color: $body-color;
        // @include font-weight(700);
        @include margin-leader($lines: .75, $font-size: $font-size-normal);
        @include margin-trailer($lines: .75, $font-size: $font-size-normal);
    }
}

@mixin h5($extend: true) {
    @if $extend {
        @extend %h5;
    } @else {
        @include heading;
        color: $body-color;
        @include margin-trailer($lines: .5, $font-size: $font-size-normal);
    }
}

@mixin h6($extend: true) {
    @if $extend {
        @extend %h6;
    } @else {
        @include heading;
        color: $body-color;
        @include margin-trailer($lines: .5, $font-size: $font-size-normal);
    }
}

// Subheader (mixin)
//
// From Foundation by Zurb - modified for homes
// ## Defaults
//
// ```scss
// $subheader-font-color: $border-color;
// $subheader-font-weight: 400;
//
// ```
//
// Not in Styleguide
$subheader-font-color: $border-color !default;
$subheader-font-weight: 400 !default;

@mixin subheader {
    // line-height: $subheader-line-height;
    color: $subheader-font-color;
    font-weight: $subheader-font-weight;
    // margin-top: $subheader-top-margin;
    // margin-bottom: $subheader-bottom-margin;
}

// Paragraph
//
// For body text, longer sections of body copy
//
// Markup:
// <p>Lorem ipsum Culpa do amet consequat sed occaecat Ut laborum voluptate Excepteur et Excepteur consequat consectetur pariatur veniam nisi fugiat adipisicing commodo eu consequat ut dolor est Excepteur sunt et aliquip adipisicing eu culpa deserunt.</p>
//
// Styleguide 5.2

//
// Paragraph (mixin)
//
// Mixin for creating paragraph component.
//
// > * `$extend` - true {boolean} Extends the default styles instead of inserting the mixin output. Set to false if you are customizing the component.
//
// ```scss
// @include p;
// ```
//
// Styleguide 5.2.1

@mixin p($extend: true) {
    @if $extend {
        @extend %p;
    } @else {
        @include margin-leader($lines: 1, $font-size: $font-size-normal);
        @include margin-trailer($lines: 1, $font-size: $font-size-normal);
    }
}

// viewport-width-text (mixin)
//
// Mixin for creating viewport width based font sizes and restricting the maximum.
//
// > * `$extend` - true {boolean} Extends the default styles instead of inserting the mixin output. Set to false if you are customizing the component.
//
// ```scss
// @include viewport-width-text(4, $font-size-medium, $extend: false);
// ```
//
// Styleguide 5.2.1
@mixin viewport-width-text($vw-size: 1, $max-font-size: $font-size-normal, $extend: true) {
    @if $extend {
        @extend %viewport-width;
    } @else {
        font-size: unquote($vw-size + 'vw');

        @media all and (min-width: 600px) {
          font-size: $max-font-size;
        }
    }
}


@if import-once("Type.scss") {
    %ellipsis {
        @include ellipsis($extend: false);
    }

    %heading {
        @include heading($extend: false);
    }
    %h1 {
        @include h1($extend: false);
    }
    %h2 {
        @include h2($extend: false);
    }
    %h3 {
        @include h3($extend: false);
    }
    %h4 {
        @include h4($extend: false);
    }
    %h5 {
        @include h5($extend: false);
    }
    %h6 {
        @include h6($extend: false);
    }
    %h2-bar {
        @include h2-bar($extend: false);
    }
    %p {
        @include p($extend: false);
    }
    %viewport-width-text {
        @include viewport-width-text($extend: false);
    }

    // Variations
    //*/ Bars */
    %bar-heading {
        @extend %h2;
        display: block;
        line-height: 26px;
        border: {
            width: 1px 0;
            style: solid;
            color: $border-color;
        }
        padding: .2em 10px;
        %bar-heading-rightLink {
            float: right;
            cursor: pointer;
            display: block;
            white-space: nowrap;
        }
    }
}

// Mixins
//
// Utility Mixins and placeholders, dev patterns. (Everything in this section is a mixin unless labeled otherwise)
//
// Styleguide 1.3

// X-Browser Mixins
//
// These augment those already available in [Compass](http://compass-style.org/), [Toolkit](https://github.com/Team-Sass/toolkit), and [Breakpoint](https://github.com/Team-Sass/breakpoint)
//
// Styleguide 1.3.1

// Box Sizing
//
// X-browser box-sizing property, extends global placeholder.
//
// > `$box-sizing` - 'border-box' {string} 'border-box' or 'content-box' other values will fail silently.
//
// ```scss
// * {
// 	@include box-sizing();
// }
// select {
// 	@include box-sizing(content-box);
// }
// ```
//
// Styleguide 1.3.1.1

@mixin box-sizing($box-sizing: unquote('border-box')) {
    @extend %box-sizing-#{$box-sizing} !optional;
}

//
// IE
//
// In Internet Expolorer _n_, HDC Portal loads with `<html.lt-ie_n+1_>`. This will scope styles to the `$ie` version specified.
//
// **This mixin is for quirks of IE < 10 only.** For graceful degredation of styles, please use the the classes available from [Modernizr](http://modernizr.com/).
//
// > `$ie` - {number} Version of IE to target.
//
// ```scss
// div {
// 	@include box-shadow($box-shadow);
// 	@include ie(8) {
// 		border: 1px solid grey;
// 	}
// }
// ```
//
// Styleguide 1.3.1.2

@mixin ie($ie) {
    .lt-ie#{$ie + 1} & {
        @content;
    }
}

//
// IE Font
//
// Internet Explorer 8 can't understand font-weight or font-style in web fonts. This mixin scopes a declaration of `font-family: 'Open Sans {font-weight || font-style}' to produce bold or italic text.
// *This mixin is for quirks of IE < 10 only.* For graceful degredation of styles, please use the the classes available from [Modernizr](http://modernizr.com/).
//
// > `$type` - {String} font type.
//
//
// Not in Styleguide

@mixin ie-font($type) {
    @extend %ie-#{$type} !optional;
}

//
// Font Weight (global)
//
// Internet Explorer 8 can't understand font-weight in web fonts. This mixin scopes a declaration of `font-family: 'Open Sans {font-weight}' to produce different font weights in IE8.
//
// Must be used to prevent multiple wrapping issues in IE 8 and below.
//
// > `$weight` - {font-weight} Font weight to target;
//
// ```scss
// h1 {
// 	@include font-weight(700);
// }
// ```
//
// Styleguide 5.0.2

@mixin font-weight($weight) {
    font-weight: $weight;
    @if $weight == 700 {
        @include ie-font(bold);
    } @else if $weight == 400 {
        @include ie-font(normal);
    } @else if $weight == 300 {
        @include ie-font(light);
    } @else {
        @include ie-font($weight);
    }

}

//
// Font Style (global)
//
// Internet Explorer 8 can't understand font-style in web fonts. This mixin scopes a declaration of `font-family: 'Open Sans {font-style}' to produce different font styles in IE8.
//
// > `$style` - {font-style} Font style to target;
//
// ```scss
// h1 {
// 	 @include font-weight(700);
// }
// ```
//
// Styleguide 5.0.3

@mixin font-style($style) {
    font-style: $style;
    @include ie-font($style);
}

// Scoping Mixins
//
// Scope styles where a dedicated layout SCSS file would be undesireable.
//
// Styleguide 1.3.2

//
// Powered By
//
// Scope adjustments for powered by pages.
//
// > `@content`
//
// ```scss
// p {
// 	@include powered-by {
// 		font-size: 12px;
// 	};
// }
// ```
//
// Styleguide 1.3.2.1

@mixin poweredBy {
    .poweredBy & {
        @content;
    }
}

//
// Page
//
// Scope adjustments for page routes (<body.page-_route_>).
//
// > * `$page...` - {string | list} page route(s)
// > * `@content`
//
// ```scss
// .box {
// 	background: transparent url(/media/portalimgcache/national/searchBox-forsale_national.jpg) no-repeat center top;
// 	max-height: image-height('national/searchBox-forsale_national.jpg');
//
// 	@include page(propdirect) {
// 		background-image: url(/media/portalimgcache/national/searchBox-forsale_state.jpg);
// 		max-height: image-height('national/searchBox-forsale_state.jpg');
// 	}
// ```
//
// Styleguide 1.3.2.2

@mixin page($page...) {

    $targets: prepend-selector($page, 'body.page-');

    $selectors: ();

    @each $target in $targets {
        $target: $target + ' &';
        $selectors: append($selectors, unquote($target), comma);

    }
    #{$selectors} {
        @content;
    }

}

//
// Layout Mixins
//
// These augment those already available in [Compass](http://compass-style.org/), [Toolkit](https://github.com/Team-Sass/toolkit), and [Breakpoint](https://github.com/Team-Sass/breakpoint)
//
// Styleguide 1.3.3

//
// Clearfix
//
// > * `$both` - false - {boolean} clear top and bottom
// > * `$extend` - true - {boolean} extend global placeholder, set to false to boost specificty
//
// ```scss
// div {
// 	margin: rhythm-px() $grid-space;
// 	&>div {
// 		float: left;
// 	}
// 	@include clearfix;
// }
// ```
//
// Styleguide 1.3.3.1

@mixin clearfix($both: false, $extend: false) {
    @if $both {
        @if ($extend) {
            @extend %clearfix-both;
        } @else {
            &:before,
            &:after {
                content: "";
                display: table;
                clear: both;
            }
        }
    } @else {

        @if ($extend) {
            @extend %clearfix-both;
        } @else {
            &:after {
                content: "";
                display: table;
                clear: both;
            }
        }
    }
}

//
// Pseudo Icon Mixins
//
// Add icons to elements as pseudo elements
//
// Styleguide 1.3.4

//
// Pseudo Icon
//
// Add a blank pseudo element and  style with with `@content`
//
// > * `$width` - false - {boolean || measurement} width of icon
// > * `$height` - false - {boolean || measurement} height of icon
// > * `$position` - before - {[before || after]} location of pseudo element
// > * `$blank` - false - do not add `display:inline-block` property
// > * `@content` - applies to added pseudo element
//
// ```scss
//.button-offsite {
// 	@include pseudo-icon() {
// 		@include generate-sprite(cta_offsite_white);
// 		height: 16px;
// 		width: 16px;
// 		background: $white;
// 		margin-right:.4em;
// 	}
// }
// ```
//
// Styleguide 1.3.4.1

@mixin pseudo-icon($width: false, $height: false, $position: before, $blank: false) {
    @if $position == 'both' {
        &:before,
        &:after {
            content: '';
            @content;
            @if $width {
                width: $width;
            }
            @if $height {
                height: $height;
            }
            @if $blank == false {
                display: inline-block;
            }
        }
    } @else {
        &:#{$position} {
            content: '';
            @if $width {
                width: $width;
            }
            @if $height {
                height: $height;
            }
            @content;
            @if $blank == false {
                display: inline-block;
            }
        }
    }
}

//
// Pseudo Icon Sprite
//
// Style the pseudo Icon at `$position` with `$icon` from the icon sprite
//
// > * `$icon` - {string} name of icon
// > * `$position` - before - {[before || after]} location of pseudo element
//
// ```scss
// .tool-save {
// 	@include pseudo-icon-sprite(tools_save);
// 	&:hover {
// 		@include pseudo-icon-sprite(tools_save_orange);
// 	}
// 	&.is-saved {
// 		@include pseudo-icon-sprite(tools_saved);
// 		&:hover {
// 			@include pseudo-icon-sprite(tools_saved_orange);
// 		}
// 	}
// }
// ```
//
// Styleguide 1.3.4.2

@mixin pseudo-icon-sprite($icon, $position: before) {
    @include generate-sprite($name: $icon, $pseudo: $position);
}

//
// Pseudo Sprite
//
// Like Pseudo Icon Sprite but accepts `@content`
//
// > * `$icon` - {string} name of icon
// > * `$position` - before - {[before || after]} location of pseudo element
// > * `@content` - applies to selected pseudo element
//
//
// ```scss
// .button {
// 	@include pseudo-sprite(star) {
// 		vertical-align: middle;
// 		margin-top: -4px;
// 		margin-right: $font-size-small/2;
// 	};
// }
// ```
//
// Styleguide 1.3.4.3
@mixin pseudo-sprite($icon, $position: before) {
    &:#{$position} {
        @include generate-sprite($icon);
        @content;
    }
}

//
// Squish Button
//
// Like Compass' `squish-text()` except doesn't add `display` property
//
// ```scss
// button {
// 	@include squish-text;
// }
// ```
//
// Styleguide 1.3.3.2
@mixin squish-button {
    font-size: 0;
    line-height: 0;
    text-shadow: none;
    color: transparent;
}

//
// Square Dimensions
//
// Ouputs the same value for `width` and `height` properties for when you're feeling too lazy to copy paste.
//
// > * `$dim` - {measurement} Measurement to repeat
//
// ```scss
// .circle {
// 	@include dim-square(24px);
// 	@include border-radius(100%);
// }
// ```
//
// Styleguide 1.3.3.3
@mixin dim-square($dim) {
    width: $dim;
    height: $dim;
}

//
// Stripe
//
// Applies `@content` to `$selectors:nth-child($nth)`
//
// > * `$selectors` - td - {string || list} elements to count
// > * `$nth` - 'even'- {expression} target `:nth-child($nth)`
//
// ```scss
// table {
// 	@include stripe($selectors: join('td, tr'), $nth:'even') {
// 		background: rgba($lightGrey, .5);
// 	};
// }
// ```
//
// Styleguide 1.3.3.4
@mixin stripe($selectors: unquote('td'), $nth: unquote('even')) {
    $new-selectors: null;
    @each $i in $selectors {
        $new-selectors: append($new-selectors, unquote($i), comma);
    }
    #{$new-selectors} {
        &:nth-child(#{$nth}) {
            @content;
        }
    }
}

@if import-once('Utility.scss') {
    // .lt-ie9 {
    // 	%ie-bold {
    // 		font-family: 'Open Sans Bold', Arial, sans-serif;
    // 	}
    // 	%ie-boldItalic {
    // 		font-family: 'Open Sans Bold Italic', Arial, sans-serif;
    // 	}
    // 	%ie-italic {
    // 		font-family: 'Open Sans Italic', Arial, sans-serif;
    // 	}
    // 	%ie-light {
    // 		font-family: 'Open Sans Light', Arial, sans-serif;
    // 	}
    // 	%ie-normal {
    // 		font-family: 'Open Sans', Arial, sans-serif;
    // 	}
    // }

    %box-sizing-border-box {
        box-sizing: border-box;
    }
    %box-sizing-content-box {
        box-sizing: content-box;
    }

    %clearfix {
        @include clearfix();
    }
    %clearfix-both {
        @include clearfix(true);
    }

    %normT {
        font: normal 400 #{$base-font-size} / #{$base-line-height} $font-family;
        color: $body-color;
    }
}
